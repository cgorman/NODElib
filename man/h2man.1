.TH H2MAN 1 "1 Jan 2000" "NODElib" "NODElib Programmer's Manual"
.SH NAME
h2man \- generate man pages from header files.
.SH SYNOPSIS
.B h2man
[\-title name] [\-section num] [\-source name]
.br
\ \ \ \ \ \ [\-manual name] files ... [options]

But usually just:

.B h2man
file.h
.SH DESCRIPTION
The
.B h2man
program is a
.B perl\c
(1)
script that generates a
.B man\c
(1) page from the supplied C header files.  The header files must obey
a few simple rules which should not be too difficult for most
programmers to follow. The ideal setting for
.B h2man
is in documenting the programmer's interface to a collection of C
routines.  The output is written to a file named with the same
base-name as the input file, but with a suffix given by the section
number (or a default of 3) as is standard for man pages.
.SS Options
The following options only effect the very first line of the generated
man page, which selects the title and sectioning parameters for the
man page.  Each option corresponds exactly with one option to the
".TH" command used in the
.B nroff -man
format.  See
.B man\c
(7) for more details.
.TP
.I -title name
The title of the man page (e.g., 
.I H2MAN\c
).  The default is the base-name of the processed file translated into
capital letters.
.TP
.I -section num
The section  number the man page should be placed in and the file name
suffix to give the output file name (e.g.,
.I 1\c
).  The default is 3, since that is the section for program library
routines.
.TP
.I -source name
The source of the command (e.g.,
.I SCRLIB\c
).  This is usually the name of the package your header file will be
part of.  The default is the empty string.
.TP
.I -manual name
The title of the manual (e.g.,
.I SCRLIB Programmer's Manual\c
).  The default is the empty string.
.SH FILE FORMAT
The man page generated by
.B h2man
can contain any number of user specified sections, but it must always
contain at least NAME, SYNOPSIS, and DESCRIPTION which are
automatically generated from the contents of the header file. The
contents of the NAME section is simply taken from the header file's
first comment.  The SYNOPSIS section can contain any user specified
information, but it will always contain a list of all function
prototypes and preprocessor macros that take an argument.  The
DESCRIPTION section is subdivided into as many as four subsections:
type declarations, function prototypes, macros, and miscellany.  Each
subsection contains documentation for only those portions of the
header file that have been explicitly documented, i.e. if you do not
comment a function prototype it will not appear in the DESCRIPTION
section.  The miscellany subsection contains documentation from
comments which begin with
.B h2man:include
and is intended primarily for global variable documentation.

.B H2man
groups all comments in a header file into three different types
which are primarily grouped according to the comment's location
relative to C code:
.TP
.B A file header
Each header file must have one header comment which is the very first
comment in the file.
.TP
.B Interface documentation
Any comment which immediately precedes a function prototype, a typedef
declaration, or a preprocessor macro which takes at least one
argument. Also, any comment which begins with
.B h2man:include.\c
\.
.TP
.B  Ignored comments
Any other type of comment, or one which is explicitly ignored because
of a directive.
.LP
.SS File Header
The smallest possible file header looks like:
.LP
.nf
/* NAME
 *   foo.h
 */
.fi
.LP
But a more descriptive one is:
.LP
.nf
/* Copyright (c) 1995 by Gary W. Flake.  All rights reserved.
 * Please see a the release notes for the full conditions.
 *
 * NAME
 *   foo.h - an example for h2man.
 * SYNOPSIS
 *   Does very little but illustrates some of the capabilities
 *   of the program.  In particular, the text in this section
 *   will be placed in front of the function prototypes in the
 *   synopsis section.
 * DESCRIPTION
 *   Likewise, this text will be the first in the description
 *   section.
 * ANOTHER SECTION
 *   This will be yet another section which starts after the
 *   description section.
 */
.fi
.LP
Notice that the comment is flush-left with each line starting with a
"\ *\ ".  Currently, all file headers must have the same structure.
However, this may change if enough people complain.
The copyright notice is optional because
.B h2man
throws away all text of the file header up until the first line that
contains a word all in capital letters.  The amount of indentation is
not too crucial, but all non-section names must be indented at least
one space relative to the section names, which must be on their own
line and in all capital letters.
.SS Interface Documentation
For any function prototype, typedef type declaration, or preprocessor
macro which takes and argument you can document the code with a
comment that starts in the first column and precedes the related C
code.  Interface comments should not have a flush-left "\ *\ " border,
as does the file header.

Function prototypes should also be flush-left as well. Moreover,
prototypes should contain argument names in addition to types.
Otherwise,
.B h2man
will do a poor job of converting the prototype into a suitable form
for viewing.

For documenting anything besides a typedef, prototype, or macro you
can use the
.B h2man:include
directive which looks like:
.nf

/* h2man:include - Any documentation that you would want
   to include in the Miscellaneous subsection of the
   description section.  This is a good place to document
   globals. */
.fi
.SS  Ignored Comments
As a rules of thumb, any comment which precedes anything but a typedef,
prototype, or macro will be ignored.  Thus, a simple place to put a
comment invisible to
.B h2man
is before a global variable or another comment.  You can also
explicitly tell
.B h2man
to ignore comments as well as whole sections of code.  Here are the
different ways of doing this.
.TP
.B Skipping a single line:
.nf
/* h2man:ignore */ int ignores_just_this_line_line;

int ignores_just_this_line_line; /* h2man:ignore */
.fi
.TP
.B Skipping one syntactical expression
The next two directives cause
.B h2man
to skip only the prototype and the typedef expression because the
directive is on its own line and with no additional text inside the
comment.
.nf

/* h2man:ignore */
int foo(int bar);

/* h2man:ignore */
typedef foo_s {
  int a;
  char b;
} FOO;
.fi
.TP
.B Skipping whole blocks:
.nf
/* h2man:skipbeg */

  /* Any number of comments */
  /* Any number of C expressions */

/* h2man:skipend */

.fi
Whenever
.B h2man
strips the header file based on comment directives, the header file
is processed as if the directives and the removed text never existed.
Thus, you should watch out for cases such as:
.nf

/* Some unrelated comment */

/* h2man:ignore */
int foo(void);
int bar(void);

.fi
In the example above the unrelated comment will be coupled to the
prototype for bar(), which is clearly not the intention.
.SS Escape Codes and Embedded Commands.
All text that is passed on to the man page is filtered for escape
sequences.  The backslash, "\\", can be used to quote special
characters or it can be used as "\\n" to add an embedded newline into
the text.  All carriage returns remain intact in the text unless
escaped at the end of line with a backslash.

By embedding
.B nroff\c
(1) commands into the comments you can add a little personality to the
documentation. For example:
.nf

/* This is a \\n.B bold\\n word, and this is an
   .I underlined\\n word. */
.fi
.LP
would be appear as:
.LP

This is a 
.B bold
word.  This is an 
.I underlined
word.
.LP
after being processed by
.B h2man
and
.B nroff.
.SS Itemized lists
One could embed the commands necessary to compose an itemized list,
but this would result in a C comment that would be very unreadable.
As an alternative,
.B h2man
grabs anything that looks like an itemized list and processes it in a
sane way.  A line looks like an itemized list if it begins with one of
"*o+-" or "0-9" (with a possible trailing ".").  If the item extends
to more than one line then the carriage returns must be escaped. For
example:
.nf

/* This is the start of my list:
     * This is the first item.
     * This is the second item which extends to multiple \\
       lines and just keeps going and going.
     * This is the third item. */
.fi
.LP
would turn into:
.LP
.PD 0
This is the start of my list:
.TP
.B *
This is the first item.
.TP
.B *
This is the second item which extends to multiple line and just keeps
going and going.
.TP
.B *
This is the third item.
.PD 1
.SH BUGS
Undoubtedly some exist.  It would be nice to be able to determine if
comments have or do not have a flush-left border of some sort, instead
of blindly following the author's preference.  Some of the pattern
matching code is probably too simplistic as well.
.SH AUTHOR
Gary W. Flake (\c
.B gary.flake@usa.net\c
).
.SH SEE ALSO
.B nroff\c
(1),
.B troff\c
(1),
.B groff\c
(1),
.B man\c
(1)
.B man\c
(7),
.B perl\c
(1).